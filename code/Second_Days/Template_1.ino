/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/ea626775-ca55-4088-8556-81b1b9834490 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String alert_msg;
  int current_Person_amount;
  int overall_Person_amount;
  bool alert_status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>

#define Object1 A1
#define Object2 A2
#define Object3 A3

#define check_in A4
#define check_out A5

#define Buzzer 6

int IRValue1,IRValue2,IRValue3,IRValueIN,IRValueOUT;
int sensitivity_value = 0;
int sensitivity_value1 = 0;
int sensitivity_value2 = 0;
int sensitivity_value3 = 0;
int stolen_object;

void setup() {
  //Defind pin status
  pinMode(Buzzer, OUTPUT);
  pinMode(Object1, INPUT);
  pinMode(Object2, INPUT);
  pinMode(Object3, INPUT);
  pinMode(check_in, INPUT);
  pinMode(check_out, INPUT);
  

  //start serial
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);



  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  current_Person_amount = 0;
  overall_Person_amount = 0;
  alert_status = false;
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  
}

void loop() {
  ArduinoCloud.update();
  // read all IR value first
  IRValue1 = analogRead(Object1);
  IRValue2 = analogRead(Object1);
  IRValue3 = analogRead(Object1);
  IRValueIN = analogRead(check_in);
  IRValueOUT = analogRead(check_out);
  
  //Serial print
  Serial.print("1:");
  Serial.println(Object1);
  Serial.print("2:");
  Serial.println(Object2);
  Serial.print("3:");
  Serial.println(Object3);
  
  Serial.print("IN:");
  Serial.println(check_in);
  Serial.print("OUT:");
  Serial.println(check_out);
  
  //CHECK IN COUNT
  if(IRValueIN <= sensitivity_value){
    current_Person_amount += 1;
    overall_Person_amount += 1;
  }
  
  //CHECK OUT COUNT
  if(IRValueOUT <= sensitivity_value){
    current_Person_amount -= 1;
  }
  
  if(current_Person_amount > 5){
    //beep mf get out
  }
  
  //IF SOMETHING GET STOLEN
  if(alert_status){
    alert_msg = "Object %d get stolen at ",stolen_object;
    //beep mf
  }else if(!alert_status){
    alert_msg = "Nothing Happen, ALL GOOD";
  }
  
  //Check if object got stolen
  if(IRValue1 <= sensitivity_value1){
    alert_status = true;
    stolen_object = 1;
  }
  if(IRValue2 <= sensitivity_value2){
    alert_status = true;
    stolen_object = 2;
  }
  if(IRValue3 <= sensitivity_value3){
    alert_status = true;
    stolen_object = 3;
  }
}

void ResetIR(){
  sensitivity_value1 = analogRead(Object1);
  sensitivity_value2 = analogRead(Object1);
  sensitivity_value3 = analogRead(Object1);
}

void onAlertStatusChange()  {
  ResetIR();
  // Add your code here to act upon AlertStatus change
}
